<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端必会的mysql讲解</title>
      <link href="/2020/05/07/MySQL01/"/>
      <url>/2020/05/07/MySQL01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>随着现在前端开发人员与日俱增，社会如此美好，技术如此高超，不掌握一门神奇的语言怎么对得起将来的自己？？如果你曾几何时想自己开发简单服务器，那必少不了对数据库的操作，推荐Mysql~（如果看不懂最后的Node-mysql也别急，后期会慢慢来维护我的博客，对其分类总结哒！以后会找时间认证讲解Node.js，大家先学一下数据库操作吧，码起来！！）</p></blockquote><a id="more"></a><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库-MySQL"><a href="#数据库-MySQL" class="headerlink" title="数据库 MySQL"></a>数据库 MySQL</h2><h3 id="数据库入门"><a href="#数据库入门" class="headerlink" title="数据库入门"></a>数据库入门</h3><p>未来我们程序中的数据为了方便管理都通过数据库来存储。</p><p>作为前端开发人员，对数据库做一定了解即可。</p><h4 id="数据库基础知识"><a href="#数据库基础知识" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h4><ul><li>什么是数据库<ul><li>存储数据的仓库</li><li>使用数据库管理数据的好处<ul><li>方便存储、查询、修改、删除</li></ul></li><li>关系型数据库<ul><li>MySQL</li><li>Sql Server</li><li>Orcale</li><li>SQLite</li></ul></li></ul></li><li>数据表<ul><li>二维的表，类似于Excel表</li><li>由行和列组成，列：字段，行：记录</li><li>字段的类型<ul><li>int 整数、double 浮点数、varchar(255) 字符串、text 文本、datetime 日期、float 浮点数</li></ul></li></ul></li></ul><h4 id="MySQL-的服务器"><a href="#MySQL-的服务器" class="headerlink" title="MySQL 的服务器"></a>MySQL 的服务器</h4><ul><li><p>下载地址：</p><ul><li><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a></li></ul></li><li><p>MySQL 安装与配置</p><ul><li><p>准备工作</p><p>在 <strong>C 盘根目录</strong>建立目录： c:\develop</p></li><li><p>解压并移动位置</p><p>解压缩 mysql-5.7.23 的压缩包，将<strong>其中</strong>的 <strong><code>mysql-5.7.23-xxxxx</code> 目录</strong>移动到 <code>C:\develop</code> 目录下并把名字修改为 <strong><code>mysql</code></strong></p></li><li><p>MySQL 的配置文件 my.ini</p><p>在 <code>c:\develop\mysql</code> 目录下新建一个 <code>my.ini</code> 的配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># MySQL 安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:/develop/mysql</span><br><span class="line"><span class="comment"># 数据文件所在目录</span></span><br><span class="line"><span class="attr">datadir</span>=C:/develop/mysql/data</span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">sql-mode</span>=<span class="string">"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br></pre></td></tr></table></figure></li><li><p>以管理员身份运行 CMD 执行以下命令，安装一个 MySQL 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位到安装目录下的 bin 文件夹</span></span><br><span class="line"><span class="comment"># cd &lt;MySQL安装目录&gt;\bin</span></span><br><span class="line"><span class="built_in">cd</span> c:\develep\mysql\bin</span><br><span class="line"><span class="comment"># 初始化数据所需文件以及获取一个临时的访问密码</span></span><br><span class="line">mysqld --initialize --user=mysql --console</span><br></pre></td></tr></table></figure><p>初始化成功如下图：记下临时密码(只能使用一次)</p><div class="fancybox caption">                <img src='http://s1.wailian.download/2020/05/07/1545190967742.png'>              </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 MySQL 安装为服务 可以指定服务名称</span></span><br><span class="line">mysqld --install MySQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有以管理员的身份运行命令行</span></span><br><span class="line"><span class="comment"># 安装失败提示：Install/Remove of the Service Denied! </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功后，启动 MySQL 服务器</span></span><br><span class="line">net start MySQL</span><br></pre></td></tr></table></figure></li><li><p>重置 MySQL  密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先通过用户名密码进入 MySQL 操作环境</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">Enter password: <span class="comment"># 输入临时密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库访问密码，一定要加分号</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">'*******'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="MySQL-的客户端"><a href="#MySQL-的客户端" class="headerlink" title="MySQL 的客户端"></a>MySQL 的客户端</h4><ul><li>数据库的客户端 Navicat</li><li>使用 Navicat 创建数据库</li><li>使用 Navicat 创建表，添加数据</li></ul><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>要在程序中对数据库进行操作需要 SQL 语句</p><ul><li><p>什么是 SQL</p><ul><li>SQL 指结构化查询语言</li><li>SQL 使我们有能力访问数据库</li><li><a href="http://www.w3school.com.cn/sql/index.asp" target="_blank" rel="noopener">参考网站</a></li></ul></li><li><p>增删改查</p><ul><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (uname, upwd, uqq) <span class="keyword">values</span>(<span class="string">'zs'</span>,<span class="string">'123'</span>, <span class="string">'12345'</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> posts <span class="keyword">SET</span> uname=<span class="string">'zs'</span>, upwd=<span class="string">'123'</span>, uqq=<span class="string">'12345'</span></span><br><span class="line"><span class="comment">-- 如果是所有列，可以省略列名称，不推荐</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">values</span>(<span class="string">'zs'</span>,<span class="string">'123'</span>, <span class="string">'12345'</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> uname=<span class="string">'zsxxx'</span>, uqq=<span class="string">'111'</span> <span class="keyword">WHERE</span> uid=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uid = <span class="number">1</span></span><br><span class="line"><span class="comment">-- 不带条件删除表中所有数据，禁止使用</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span></span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><p>条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uname=<span class="string">'zs'</span> <span class="keyword">AND</span> uname=<span class="string">'000000'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uname=<span class="string">'zs'</span> <span class="keyword">OR</span> uname=<span class="string">'ls'</span></span><br></pre></td></tr></table></figure><p>下面的运算符可在 WHERE 子句中使用：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr></tbody></table></li><li><p>模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uname <span class="keyword">like</span> <span class="string">'%s%'</span></span><br></pre></td></tr></table></figure></li><li><p>in 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uname <span class="keyword">in</span> (<span class="string">'zs'</span>,<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure></li><li><p>排序</p><p>order by 要写在 sql 语句的最后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- asc 升序  desc 降序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uage &gt; <span class="number">18</span> <span class="keyword">ORDER</span> <span class="keyword">by</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>限制查询条数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 取前3条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">LIMIT</span> <span class="number">3</span>  </span><br><span class="line"><span class="comment">-- 降序后去3条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- 跳过3条，取2条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>获取总条数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="keyword">users</span></span><br></pre></td></tr></table></figure></li><li><p>表连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table_name2 </span><br><span class="line"><span class="keyword">ON</span> table_name1.column_name=table_name2.column_name</span><br></pre></td></tr></table></figure></li></ul><h2 id="Node-js-中操作-MySQL"><a href="#Node-js-中操作-MySQL" class="headerlink" title="Node.js 中操作 MySQL"></a>Node.js 中操作 MySQL</h2><h3 id="使用-mysql-第三方包"><a href="#使用-mysql-第三方包" class="headerlink" title="使用 mysql 第三方包"></a>使用 mysql 第三方包</h3><p><a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">https://github.com/mysqljs/mysql</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'me'</span>,</span><br><span class="line">  password : <span class="string">'secret'</span>,</span><br><span class="line">  database : <span class="string">'my_db'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><hr><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><p>基本查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">'SELECT * FROM `books` WHERE `author` = "David"'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// error will be an Error if one occurred during the query</span></span><br><span class="line">  <span class="comment">// results will contain the results of the query</span></span><br><span class="line">  <span class="comment">// fields will contain information about the returned results fields (if any)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">'SELECT * FROM `books` WHERE `author` = ?'</span>, [<span class="string">'David'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// error will be an Error if one occurred during the query</span></span><br><span class="line">  <span class="comment">// results will contain the results of the query</span></span><br><span class="line">  <span class="comment">// fields will contain information about the returned results fields (if any)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> post  = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Hello MySQL'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> query = connection.query(<span class="string">'INSERT INTO posts SET ?'</span>, post, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="comment">// Neat!</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(query.sql); <span class="comment">// INSERT INTO posts SET `id` = 1, `title` = 'Hello MySQL'</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">'DELETE FROM posts WHERE title = "wrong"'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'deleted '</span> + results.affectedRows + <span class="string">' rows'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">'UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?'</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, userId], <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="封装-dbHelper-js"><a href="#封装-dbHelper-js" class="headerlink" title="封装 dbHelper.js"></a>封装 dbHelper.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  port     : <span class="number">3306</span>,</span><br><span class="line">  user     : <span class="string">'root'</span>,</span><br><span class="line">  password : <span class="string">'root'</span>,</span><br><span class="line">  database : <span class="string">'guestbook'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">exports.query = <span class="function">(<span class="params">sql, params, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.connect();</span><br><span class="line">  connection.query(sql, params, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123; </span><br><span class="line">    callback(error, results, fields);</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端小伎俩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别人家的孩子—ifream</title>
      <link href="/2020/05/03/ifream01/"/>
      <url>/2020/05/03/ifream01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>说起iframe，大家都会觉得很嫌弃或者很不愿接近，原因大概都是：能耗高，安全问题，spider不喜欢它…也有（不少）同学内心独白就是：不！这很low很dirty，我才不想用惹！但是我们必须的承认iframe之强大，很多时候我们都会（不得不）使用它，真的素又爱又恨呐-8-</p></blockquote><a id="more"></a><p>不得不吐槽一下我的刚进入公司时，是充满了疑惑和惊喜，被指派修改后端框架所带来的各种样式问题与兼容性问题，那会公司用的框架分别是 <code>jeecg</code> <code>bex5</code> ，充满了iframe；感兴趣的童鞋可以去搜一下这两个，对于一个出生前端的程序员来说，坐在那里就是一脸懵逼，没办法，那段昏暗的日子是百度陪我度过的，不会就学，不懂就问！</p><p> 今天就在这里和大家一起好好讨论一下iframe。 </p><h2 id="iframe基本概念"><a href="#iframe基本概念" class="headerlink" title="iframe基本概念"></a>iframe基本概念</h2><p> 我们先看一个🌰 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"demo.html"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">name</span>=<span class="string">"demo"</span> <span class="attr">scrolling</span>=<span class="string">"auto"</span> <span class="attr">sandbox</span>=<span class="string">"allow-same-origin"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iframe的一些基本属性：</p><ul><li>src iframe页面地址，有同域跨域之分</li><li>height iframe高度</li><li>width iframe宽度</li><li>name iframe命名，可通过window.frames[xxx]被调用</li><li>scrolling iframe滚动模式</li><li>sandbox html5新特性，用于限制iframe的功能</li></ul><h2 id="使用iframe的正确姿势"><a href="#使用iframe的正确姿势" class="headerlink" title="使用iframe的正确姿势"></a>使用iframe的正确姿势</h2><p> 我们可以通过<code>contentWindow</code>和<code>contentDocument</code>两个API获取iframe的window对象和document对象。 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">let</span> iwindow = iframe.contentWindow; <span class="comment">// 获取iframe的window对象</span></span><br><span class="line"><span class="keyword">let</span> idoc = iframe.contentDocument; <span class="comment">// 获取iframe的document对象</span></span><br></pre></td></tr></table></figure><p> 刚刚我们提到了iframe的name属性，我们也可以通过window.frames[iframeName]来调用iframe。 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">window</span>.frames[<span class="string">'demo'</span>]</span><br></pre></td></tr></table></figure><h2 id="iframe使用父级内容的正确姿势"><a href="#iframe使用父级内容的正确姿势" class="headerlink" title="iframe使用父级内容的正确姿势"></a>iframe使用父级内容的正确姿势</h2><p>我们通过<code>window.self</code>，<code>window.parent</code>，<code>window.top</code>这三个属性分别获取自身window对象，父级window对象，顶级window对象。</p><p>看图说话</p><div class="fancybox caption">                <img src='http://s1.wailian.download/2020/05/03/2020020301.png'>              </div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iframe1.<span class="keyword">self</span> === iframe1</span><br><span class="line">iframe1.<span class="keyword">parent</span> === iframe2</span><br><span class="line">iframe2.<span class="keyword">parent</span> === window</span><br><span class="line">iframe1.top === window</span><br></pre></td></tr></table></figure><h2 id="同域-跨域"><a href="#同域-跨域" class="headerlink" title="同域/跨域"></a>同域/跨域</h2><p>什么是同域什么跨域咧？同域跨域的区别在哪咧？我们一般会使用iframe来进行父子页面的通信，然鹅父子页面是否同域决定了它们之间能否进行通信。</p><p>js遵循同源策略，即同协议，同域名，同端口号，否则都算跨域。</p><blockquote><p>同源策略 是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。实际上，这种策略只是一个规范，并不是强制要求，各大厂商的浏览器只是针对同源策略的一种实现。它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。</p></blockquote><blockquote><p>跨域 简单的来说，指的是两个资源非同源。出于安全方面的考虑，页面中的JavaScript在请求非同源的资源时就会出 跨域问题 ——即跨域请求，这时，由于同源策略，我们的请求会被浏览器禁止。也就出现了 我们常说的 跨域 问题。</p></blockquote><h2 id="iframe跨域通讯之document-domain"><a href="#iframe跨域通讯之document-domain" class="headerlink" title="iframe跨域通讯之document.domain"></a>iframe跨域通讯之document.domain</h2><p>对于主域相同子域不同的两个页面，我们可以通过document.domain + iframe来解决跨域通信问题。</p><p>举个🌰，网页a(<a href="http://www.easonwong.com)和网页b(http://script.easonwong.com)，两者都设置`document.domain" target="_blank" rel="noopener">http://www.easonwong.com)和网页b(http://script.easonwong.com)，两者都设置`document.domain</a> = ‘easonwong.com’`（这样浏览器就会认为它们处于同一个域下），然后网页a再创建iframe上网页b，就可以进行通信啦～！</p><p>网页a</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'easonwong.com'</span>;</span><br><span class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">ifr.src = <span class="string">'http://script.easonwong.com'</span>;</span><br><span class="line">ifr.style.display = <span class="string">'none'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line">ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> doc = ifr.contentDocument || ifr.contentWindow.document;</span><br><span class="line">    <span class="comment">// 在这里操纵b.html</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 网页b </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'easonwong.com'</span>;</span><br></pre></td></tr></table></figure><h2 id="iframe跨域通讯之postMessage"><a href="#iframe跨域通讯之postMessage" class="headerlink" title="iframe跨域通讯之postMessage"></a>iframe跨域通讯之postMessage</h2><p>postMessage是html5的新特性，具体介绍不在此赘述。</p><p>我们可以通过html5这个新特性进行iframe间的跨域通信，使用postMessage进行数据传递，通过Message监听通信事件。举个🌰</p><p>网页a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'easonwong.com'</span>;</span><br><span class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">ifr.src = <span class="string">'http://script.easonwong.com'</span>;</span><br><span class="line">ifr.style.display = <span class="string">'none'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">ifr.postmessage(<span class="string">'hello, I`m a'</span>, <span class="string">'http://script.easonwong.com'</span>);</span><br></pre></td></tr></table></figure><p> 网页b </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听message事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiver, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiver</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.origin == <span class="string">'http://www.easonwong.com'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.data == <span class="string">'hello, I`m a'</span>) &#123;</span><br><span class="line">            e.source.postMessage(<span class="string">'hello, I`m b'</span>, e.origin);信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iframe实现JSBridge"><a href="#iframe实现JSBridge" class="headerlink" title="iframe实现JSBridge"></a>iframe实现JSBridge</h2><p>在移动端Hybrid混合模式中经常用到JSBridge进行JS和Native之间的通信，其中我们可以通过iframe的方式实现JS调用Native的方法。</p><p>以上提到的方法就是URL SCHEME拦截。</p><p>URL SCHEME是一种类似于url的链接，是为了方便app直接互相调用设计的，形式和普通的 url 近似，主要区别是 protocol 和 host 一般是自定义的，例如: <a href="easonwong://hh/url?name=easonwong">easonwong://hh/url?name=easonwong</a>，其中protocol是easonwong，host则是hh。</p><p>我们通过创建一个iframe（src设为我们自定义的URL SCHEME）来发送请求，然后Native那边可以拦截到请求并获取其中带有的参数，即可进行后续的操作。</p><h2 id="iframe的其他用途"><a href="#iframe的其他用途" class="headerlink" title="iframe的其他用途"></a>iframe的其他用途</h2><ul><li>用iframe进行异步请求</li></ul><p>在很久很久很久以前，久到ajax还没出现的时候，人们会用iframe来进行异步请求。大概就是异步创建iframe，然后后台返回数据在iframe中，我们在从里面获取数据。</p><p>例如在我做过的一个项目中，通过iframe.src传入一个文件下载地址，实现无需打开新窗口下载文件。</p><ul><li>引用/展示第三方内容</li><li>需要独立样式和带有交互的内容，例如幻灯片</li><li>sandbox沙箱隔离</li><li>历史记录管理</li></ul><h2 id="iframe的安全问题"><a href="#iframe的安全问题" class="headerlink" title="iframe的安全问题"></a>iframe的安全问题</h2><h3 id="iframe小广告"><a href="#iframe小广告" class="headerlink" title="iframe小广告"></a>iframe小广告</h3><p>很让我们讨厌iframe的一点，就是很多*网站都会有各种让人防不胜防的小广告，它们大多就是用通过iframe实现的，本来想点击某个播放按钮，结果马鸭直接跳几十跳不知道去了哪个新世界去了。</p><p>更讨厌的一种情况是，可能不知道哪天用户突然拿刀过来，说我们的项目页面里出现了野鸡广告，说我们在消费他们，一脸懵逼的我们觉得十分无辜。实际上就是我们的页面被运行商劫持了，被挂上了注入了不知名的野鸡广告。</p><p>所以我们一定要注意在用iframe的同时，要防止我们被iframe了。</p><h3 id="防嵌套页面操作"><a href="#防嵌套页面操作" class="headerlink" title="防嵌套页面操作"></a>防嵌套页面操作</h3><p>在前端领域，我们可以通过<code>window.top</code>来防止我们页面被嵌套。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span> != <span class="built_in">window</span>.top)&#123;</span><br><span class="line">    <span class="built_in">window</span>.top.location.href = myURL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过<code>window.location.host</code>来检测是否跨域了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (top.location.host != <span class="built_in">window</span>.location.host) &#123;</span><br><span class="line">　　top.location.href = <span class="built_in">window</span>.location.href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后端也可以做对应的防范措施，通过设置X-Frame-Options响应头来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。</p><h3 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h3><blockquote><p>内容安全策略（CSP）用于检测和减轻用于 Web 站点的特定类型的攻击，例如 XSS 和数据注入等。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">MDN CSP</a></p></blockquote><p>通过CSP配置sandbox和child-src可以设置iframe的有效地址，它限制适iframe的行为，包括阻止弹出窗口,防止插件和脚本的执行,而且可以执行一个同源策略。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li>我们可以在html头部中加上``标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"child-src 'unsafe-inline' 'unsafe-eval' www.easonwong.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>或者通过HTTP头部信息加上Content-Security-Policy字段</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><div class="note "><p><a href="https://www.zhihu.com/question/20653055" target="_blank" rel="noopener">Iframe 有什么好处，有什么坏处</a> 。</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端小伎俩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀前端必备的Linux冷门知识？！</title>
      <link href="/2020/05/03/Linux01/"/>
      <url>/2020/05/03/Linux01/</url>
      
        <content type="html"><![CDATA[<blockquote><p> <em>前端工程师需要对Linux掌握到什么程度？</em></p><p>我的回答是：<strong>前端切图仔根本就不需要掌握Linux，但合格的前端工程师是需要掌握一些必要的Linux命令的！</strong> </p></blockquote><a id="more"></a><blockquote><p>随着业务架构演进，服务端和客户端的渲染层均交由FEer处理，越来越多的前端开始接触Linux，做一些安装部署NodeJS项目之类的工作，本篇的主要内容就是介绍Linux下的基础知识和常用命令，帮助前端工程师在服务器中自由自在的傲游。 </p></blockquote><p>说起Linux，作为一名长时间混迹IT圈的朋友们想必都听过了解过，这里引一下官方说明</p><blockquote><p>​     “Linux是一套免费使用和自由传播的开源程序，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。被广泛的用于服务器、安卓系统等其它各种设备系统中所使用。” </p></blockquote><h1 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h1><p> 目前互联网公司使用的发行版主要是如下三个 </p><ul><li><p>CentOS </p></li><li><p>Debian </p></li><li><p>Ubuntu </p><p>如何知道一台机器的发行版？ </p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p> 想知道一台机器的基本信息（内核版本等）？ </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><p> 在Linux下，每个用户都属于一个用户组。文件和目录的读写权限等会根据<code>用户</code>和<code>用户组</code>来区分。对于组外的用户，称之为 <code>其他用户</code> `。 </p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>在Linux下目录是一等公民，万物开始于<code>/</code>。我们先说明一下系统根目录下常规的一些文件夹都是做什么的？详情见这张表 </p><table><thead><tr><th>目录名</th><th>简介</th></tr></thead><tbody><tr><td>/opt</td><td>第三方软件</td></tr><tr><td>/bin</td><td>一般用户可用一些执行文件</td></tr><tr><td>/sbin</td><td>一些系统执行文件</td></tr><tr><td>/tmp</td><td>临时文件</td></tr><tr><td>/home</td><td>一般用户的文件目录</td></tr><tr><td>/root</td><td>root用户的文件目录</td></tr><tr><td>/boot</td><td>内核文件和开机引导程序等</td></tr><tr><td>/dev</td><td>设备文件</td></tr><tr><td>/etc</td><td>各种软件的配置文件和启动脚本</td></tr><tr><td>/lib</td><td>一些系统依赖的库</td></tr><tr><td>/usr</td><td>一些系统软件所在目录</td></tr><tr><td>/var</td><td>一些系统的日志文件和缓存文件</td></tr></tbody></table><p> 上面这张表中/boot目录以上的是我们一定要理解清楚的目录，至于/boot及以下的目录只需大概了解就好。 </p><h1 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h1><p>每个平台下有自己的包管理工具，作为一个常用Mac的前端工程师，你一定知道Homebrew，自己也常常<code>brew install</code>，安完就能在命令行中使用了，非常方便。Homebrew默认的源是在海外的，很慢很慢，所以大家一般会<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git" target="_blank" rel="noopener">替换为国内的源</a>，就跟npm切成淘宝源一个意思。</p><p>为什么扯这么多Mac上的东西那？原因在于，这套包管理机制和Linux各个发行版是一致的。各个发行版中推荐使用的包管理工具如下</p><ul><li>CentOS -&gt; yum</li><li>Debian -&gt; apt-get</li><li>Ubuntu -&gt; apt-get</li></ul><p>通过包管理工具，可以轻松安装相应的包，直接就可以在命令行中使用。</p><p>其他还有一些相应格式安装包对应的安装工具，比如用于安装.deb文件的<code>dpkg</code>，还有用于安装.rpm文件的<code>rpm</code>。</p><p>包的其实也不是什么高深的东西？其实就是一个或多个拥有可执行权限的文件，比如我们执行<code>node</code>命令，实际上就是执行了一个可执行的二进制文件。</p><p>我们可以使用<code>which</code>命令查看可执行文件在哪里？例如<code>which node</code></p><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>绝大部分的软件安装都为执行程序提供了帮助手册<br>编译安装的软件，可以配置/etc/man.config<br>指定man手册路径</p><p>man命令大多给出的文档非常详细，可能有的时候并不想详读，这时候推荐使用tldr查看帮助文档。tldr是一个在线的帮助文档工具，提供的文档比较社区化，简短易懂，悲伤的是Linux机器上默认是没有tldr的，需要自己安装下，详细文档在<a href="http://tldr.sh/" target="_blank" rel="noopener">这里</a>。</p><h3 id="目录-amp-文件命令"><a href="#目录-amp-文件命令" class="headerlink" title="目录&amp;文件命令"></a>目录&amp;文件命令</h3><table><thead><tr><th>命令</th><th>简介</th><th>示例</th></tr></thead><tbody><tr><td>cp</td><td>复制文件/目录</td><td><code>cp path/to/file.ext path/to/copy.ext</code> <code>cp path/to/file.ext path/to/copy</code></td></tr><tr><td>rm</td><td>删除文件/目录</td><td><code>rm path/to/file</code> <code>rm -r path/to/folder</code></td></tr><tr><td>mv</td><td>移动文件/目录</td><td><code>mv source target</code></td></tr><tr><td>which</td><td>查找命了文件所在位置</td><td><code>which node</code></td></tr><tr><td>find</td><td>查找文件或目录</td><td><code>find root_path -name &#39;*.ext&#39;</code> <code>find root_path -size +500k -size -10MB</code></td></tr><tr><td>ln</td><td>创建文件/目录的链接</td><td><code>ln node-v6.2 node</code></td></tr><tr><td>touch</td><td>新建空文件</td><td><code>touch filename</code></td></tr><tr><td>file</td><td>查看文件类型</td><td><code>file filename</code></td></tr><tr><td>pwd</td><td>查看当前工作目录</td><td><code>pwd</code></td></tr><tr><td>cd</td><td>切换工作目录</td><td><code>cd /path</code></td></tr><tr><td>ls</td><td>显示目录内容</td><td><code>ls -lh</code></td></tr><tr><td>mkdir</td><td>创建新的目录</td><td><code>mkdir –p /directory</code></td></tr><tr><td>du</td><td>统计目录及文件的空间占用情况</td><td><code>du -sh</code> <code>du -h --max-depth=N path/to/folder</code></td></tr></tbody></table><p>Tips: 几个常见的命令行参数<br>-h -human-readable 以人能看懂的方式展示<br>-r 递归文件夹<br>-f -force 强制</p><h3 id="内容查看命令"><a href="#内容查看命令" class="headerlink" title="内容查看命令"></a>内容查看命令</h3><table><thead><tr><th>命令</th><th>简介</th><th>示例</th><th></th></tr></thead><tbody><tr><td>cat</td><td>查看显示文件内容</td><td><code>cat filename</code></td><td></td></tr><tr><td>more/less</td><td>分页查看文件内容</td><td><code>less filename</code></td><td></td></tr><tr><td>head/tail</td><td>查看文件开头/末尾的部分内容</td><td><code>tail -f web.log</code></td><td></td></tr><tr><td>wc</td><td>统计文件内容的单词数量等信息</td><td></td><td></td></tr><tr><td>grep</td><td>检索过滤文件内容</td><td><code>cat package.json</code></td><td><code>grep &#39;vue&#39;</code></td></tr></tbody></table><p>在文件查看命令中，我个人最推荐使用less命令，比较强大，基本可以满足我个人的所有需求</p><blockquote><p> 此为第一节全部内容，下一节我将详细介绍一些进程管理，CPU，内存使用量相关的命令，敬请期待。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端小伎俩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世间美好~我的第一条博客</title>
      <link href="/2020/05/01/20200501/"/>
      <url>/2020/05/01/20200501/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hello~大家好，我是小猴子，在过去很长的一段时间里，一直想建立一个属于自己的博客。<a id="more"></a></p></blockquote><p>在这个科技发达的世界里，微博、朋友圈、抖音、知乎、豆瓣~！都是可以分享自己故事的优秀平台，为什么我还要这样搭建自己的博客呢？</p><p>可能是想要更加自由，分享一些前端的小技巧，分享一些好听的音乐，分享一些生活的趣事~</p><p>我是一名94年的前端攻城狮，曾在美丽的长沙度过自己大学四年时光，毅然来到北京这座充满机遇挑战的大城市，在北京度过了自己的两年时光，这两年我收获了很多，从茫然到坚定，从幼稚到成熟，从懒散到努力。马云爸爸说过 <strong>人们必须认识到，社会是最好的大学，错误是最好的老师。</strong>  没错，这两年我也有过后悔，有过失望，也有想过放弃… 但是人生不就是用来努力换取幸福的一的过程嘛？</p><p>19年初就曾想过建立博客，奈何工作繁忙，常常加班，趁着想要换一个工作，在这段重新选择的空隙中，把自己的博客地基搭建起来啦~，（其他功能慢慢来吧=。=）。好在自己平时喜欢记录，以后呢，也会把曾经的故事心得分享在博客上，分享一些自己的工作经验，给想步入这行的小白们一些启示；也会总结分享一些技巧教程，<strong>路漫漫其修远兮，吾将上下而求索</strong> 。</p><p>这是我博客的第一篇文章，只是为了测试出来的页面效果。。嘻嘻嘻</p><p>对了，祝大家五一快乐，劳动最光荣！</p>]]></content>
      
      
      <categories>
          
          <category> 生活类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
